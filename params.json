{"name":"Laravel 4 Generators for Bootstrap 3","tagline":"Rapidly speed up your Laravel 4 workflow with generators works to Bootstrap 3","body":"### Welcome to GitHub Pages.\r\n\r\n## Forked from JeffreyWay/Laravel-4-Generators.\r\n\r\nThis package updates the views provided by Jeffrey Way's original works to Bootstrap 3. The original documentation from Way's works follows. The instructions have been updated to reflect any changes within this package.\r\n\r\nThis Laravel 4 package provides a variety of generators to speed up your development process. These generators include:\r\n\r\n- `generate:model`\r\n- `generate:controller`\r\n- `generate:seed`\r\n- `generate:view`\r\n- `generate:migration`\r\n- `generate:resource`\r\n- `generate:scaffold`\r\n- `generate:form`\r\n- `generate:test`\r\n- `generate:pivot` <-- NEW!!\r\n\r\n## Prefer a Video Walk-through?\r\n\r\n[See here.](http://tutsplus.s3.amazonaws.com/tutspremium/courses_$folder$/WhatsNewInLaravel4/9-Generators.mp4)\r\n\r\n## Installation\r\n\r\nBegin by installing this package through Composer. Edit your project's `composer.json` file to require `mamun/generators`.\r\n\r\n\t\"require\": {\r\n\t\t\"laravel/framework\": \"4.0.*\",\r\n\t\t\"mamun/generators\": \"dev-master\"\r\n\t},\r\n\t\"minimum-stability\" : \"dev\"\r\n\r\nNext, update Composer from the Terminal:\r\n\r\n    composer update\r\n\r\nOnce this operation completes, the final step is to add the service provider. Open `app/config/app.php`, and add a new item to the providers array.\r\n\r\n    'Mamun\\Generators\\GeneratorsServiceProvider'\r\n\r\nThat's it! You're all set to go. Run the `artisan` command from the Terminal to see the new `generate` commands.\r\n\r\n    php artisan\r\n\r\n> There's also a [Sublime Text plugin available](http://net.tutsplus.com/tutorials/tools-and-tips/pro-workflow-in-laravel-and-sublime-text/) to assist with the generators. Definitely use it, but not before you learn the syntax below.\r\n\r\n## Usage\r\n\r\nThink of generators as an easy way to speed up your workflow. Rather than opening the models directory, creating a new file, saving it, and adding the class, you can simply run a single generate command.\r\n\r\n- [Migrations](#migrations)\r\n- [Models](#models)\r\n- [Views](#views)\r\n- [Seeds](#seeds)\r\n- [Resources](#resources)\r\n- [Scaffolding](#scaffolding)\r\n- [Forms](#forms)\r\n- [Tests](#tests)\r\n- [Pivot Tables](#pivot-tables)\r\n\r\n### Migrations\r\n\r\nLaravel 4 offers a migration generator, but it stops just short of creating the schema (or the fields for the table). Let's review a couple examples, using `generate:migration`.\r\n\r\n    php artisan generate:migration create_posts_table\r\n\r\nIf we don't specify the `fields` option, the following file will be created within `app/database/migrations`.\r\n\r\n```php\r\n<?php\r\n\r\nuse Illuminate\\Database\\Migrations\\Migration;\r\n\r\nclass CreatePostsTable extends Migration {\r\n\r\n    /**\r\n\t * Run the migrations.\r\n\t *\r\n\t * @return void\r\n\t */\r\n\tpublic function up()\r\n\t{\r\n\t  Schema::create('posts', function($table)\r\n\t  {\r\n\t    $table->increments('id');\r\n\r\n\t    $table->timestamps();\r\n\t  });\r\n\t}\r\n\r\n\t/**\r\n\t * Reverse the migrations.\r\n\t *\r\n\t * @return void\r\n\t */\r\n\tpublic function down()\r\n\t{\r\n\t  Schema::drop('posts');\r\n\t}\r\n\r\n}\r\n```\r\n\r\nNotice that the generator is smart enough to detect that you're trying to create a table. When naming your migrations, make them as description as possible. The migration generator will detect the first word in your migration name and do its best to determine how to proceed. As such, for `create_posts_table`, the keyword is \"create,\" which means that we should prepare the necessary schema to create a table.\r\n\r\nIf you instead use a migration name along the lines of `add_user_id_to_posts_table`, in that case, the keyword is \"add,\" signaling that we intend to add rows to an existing table. Let's see what that generates.\r\n\r\n    php artisan generate:migration add_user_id_to_posts_table\r\n\r\nThis will prepare the following boilerplate:\r\n\r\n```php\r\n<?php\r\n\r\nuse Illuminate\\Database\\Migrations\\Migration;\r\n\r\nclass AddUserIdToPostsTable extends Migration {\r\n\r\n    /**\r\n\t * Run the migrations.\r\n\t *\r\n\t * @return void\r\n\t */\r\n\tpublic function up()\r\n\t{\r\n\t  Schema::table('posts', function($table)\r\n\t  {\r\n\r\n\t  });\r\n\t}\r\n\r\n\t/**\r\n\t * Reverse the migrations.\r\n\t *\r\n\t * @return void\r\n\t */\r\n\tpublic function down()\r\n\t{\r\n\t  Schema::table('posts', function($table)\r\n\t  {\r\n\r\n\t  });\r\n\t}\r\n\r\n}\r\n```\r\n\r\nNotice how, this time, we're not doing `Schema::create`.\r\n\r\n#### Keywords\r\n\r\nWhen writing migration names, use the following keywords to provide hints for the generator.\r\n\r\n- `create` or `make` (`create_users_table`)\r\n- `add` or `insert` (`add_user_id_to_posts_table`)\r\n- `remove` or `drop` or `delete` (`remove_user_id_from_posts_table`)\r\n\r\n#### Generating Schema\r\n\r\nThis is pretty nice, but let's take things a step further and also generate the schema, using the `fields` option.\r\n\r\n    php artisan generate:migration create_posts_table --fields=\"title:string, body:text\"\r\n\r\nBefore we decipher this new option, let's see the output:\r\n\r\n```php\r\n<?php\r\n\r\nuse Illuminate\\Database\\Migrations\\Migration;\r\n\r\nclass CreatePostsTable extends Migration {\r\n\r\n    /**\r\n\t * Run the migrations.\r\n\t *\r\n\t * @return void\r\n\t */\r\n\tpublic function up()\r\n\t{\r\n\t  Schema::create('posts', function($table)\r\n\t  {\r\n\t    $table->increments('id');\r\n\t    $table->string('title');\r\n\t    $table->text('body');\r\n\t    $table->timestamps();\r\n\t  });\r\n\t}\r\n\r\n\t/**\r\n\t * Reverse the migrations.\r\n\t *\r\n\t * @return void\r\n\t */\r\n\tpublic function down()\r\n\t{\r\n\t  Schema::drop('posts');\r\n\t}\r\n\r\n}\r\n```\r\n\r\nNice! A few things to notice here:\r\n\r\n- The generator will automatically set the `id` as the primary key.\r\n- It also will add the timestamps, as that's more common than not.\r\n- It parsed the `fields` options, and added those fields.\r\n- The drop method is smart enough to realize that, in reverse, the table should be dropped entirely.\r\n\r\nTo declare fields, use a comma-separated list of key:value:option sets, where `key` is the name of the field, `value` is the [column type](http://four.laravel.com/docs/schema#adding-columns), and `option` is a way to specify indexes and such, like `unique` or `nullable`. Here are some examples:\r\n\r\n- `--fields=\"first:string, last:string\"`\r\n- `--fields=\"age:integer, yob:date\"`\r\n- `--fields=\"username:string:unique, age:integer:nullable\"`\r\n- `--fields=\"name:string:default('John'), email:string:unique:nullable\"`\r\n- `--fields=\"username:string[30]:unique, age:integer:nullable\"`\r\n\r\nPlease make note of the last example, where we specify a character limit: `string[30]`. This will produce `$table->string('username', 30)->unique();`\r\n\r\nIt is possible to destroy the table by issuing:\r\n\r\n\tphp artisan generate:migration destroy_posts_table\r\n\t\r\nIf you'd like to have an accurate artisan rollback option set the `fields` option as well:\r\n\r\n\tphp artisan generate:migration destroy_posts_table --fields=\"title:string, body:text\"\r\n\r\nAs a final demonstration, let's run a migration to remove the `completed` field from a `tasks` table.\r\n\r\n    php artisan generate:migration remove_completed_from_tasks_table --fields=\"completed:boolean\"\r\n\r\nThis time, as we're using the \"remove\" keyword, the generator understands that it should drop a column, and add it back in the `down()` method.\r\n\r\n```php\r\n<?php\r\n\r\nuse Illuminate\\Database\\Migrations\\Migration;\r\n\r\nclass RemoveCompletedFromTasksTable extends Migration {\r\n\r\n    /**\r\n\t * Run the migrations.\r\n\t *\r\n\t * @return void\r\n\t */\r\n\tpublic function up()\r\n\t{\r\n\t  Schema::table('tasks', function($table)\r\n\t  {\r\n\t    $table->dropColumn('completed');\r\n\t  });\r\n\t}\r\n\r\n\t/**\r\n\t * Reverse the migrations.\r\n\t *\r\n\t * @return void\r\n\t */\r\n\tpublic function down()\r\n\t{\r\n\t  Schema::table('tasks', function($table)\r\n\t  {\r\n\t    $table->boolean('completed');\r\n\t  });\r\n\t}\r\n\r\n}\r\n```\r\n\r\n### Models\r\n\r\n    php artisan generate:model Post\r\n\r\nThis will create the file, `app/models/Post.php` and insert the following boilerplate:\r\n\r\n```php\r\n<?php\r\n\r\nclass Post extends Eloquent {\r\n\r\n}\r\n```\r\n\r\n### Views\r\n\r\n    php artisan generate:view dog\r\n\r\nThis command will generate `app/views/dog.blade.php` and a simple string, for convenience.\r\n\r\n    The dog.blade.php view.\r\n\r\nAs with all of the commands, you may specify a `--path` option to place this file elsewhere.\r\n\r\n    php artisan generate:view index --path=views/dogs\r\n\r\nNow, we get: `app/views/dogs/index.blade.php`.\r\n\r\n### Seeds\r\n\r\nLaravel 4 provides us with a flexible way to seed new tables.\r\n\r\n    php artisan generate:seed dogs\r\n\r\nSet the argument to the name of the table that you'd like a seed file for. This will generate `app/database/seeds/DogsTableSeeder.php` and populate it with:\r\n\r\n```php\r\n<?php\r\n\r\nclass DogsTableSeeder extends Seeder {\r\n\r\n  public function run()\r\n  {\r\n    $dogs = [\r\n\r\n    ];\r\n\r\n    DB::table('Dogs')->insert($dogs);\r\n  }\r\n\r\n}\r\n```\r\n\r\nThis command will also update `app/database/seeds/DatabaseSeeder.php` to include a call to this new seed class, as required by Laravel.\r\n\r\nTo fully seed the `dogs` table:\r\n\r\n- Within the `$dogs` array, add any number of arrays, containing the necessary rows.\r\n- Return to the Terminal and run Laravel's `db:seed command` (`php artisan db:seed`).\r\n\r\n### Resources\r\n\r\nThink of the resource generator as the big enchilada. It calls all of its sibling generate commands. Assuming the following command:\r\n\r\n    php artisan generate:resource dog --fields=\"name:string\"\r\n\r\nThe following actions will take place:\r\n\r\n- Creates a `create_dogs_table` migration, with a name column.\r\n- Creates a `Dog.php` model.\r\n- Creates a `views/dogs` folder, containing the `index`, `show`, `create`, and `edit` views.\r\n- Creates a `database/seeds/DogsTableSeeder.php` seed file.\r\n- Updates `DatabaseSeeder.php` to run `DogsTableSeeder`\r\n- Creates `controllers/DogsController.php`, and fills it with restful methods.\r\n- Updates `routes.php` to include: `Route::resource('dogs', 'DogsController')`.\r\n- Creates a `tests/controllers/DogsControllerTest.php` file, and fills it with some boilerplate tests to get you started.\r\n\r\n> Please note that the resource name is singular - the same as how you would name your model.\r\n\r\n#### Workflow\r\n\r\nLet's create a resource for displaying dogs in a restful way.\r\n\r\n    php artisan generate:resource dog --fields=\"name:string, age:integer\"\r\n\r\nNext, we'll seed this new `dogs` table. Open `database/seeds/DogsTableSeeder.php` and add a couple of rows. Remember, you only need to edit the `$dogs` array within this file.\r\n\r\n    $dogs = [\r\n        ['name' => 'Sparky', 'age' => 5],\r\n        ['name' => 'Joe', 'age' => 11]\r\n    ];\r\n\r\nNow, we migrate the database and seed the `dogs` table.\r\n\r\n    php artisan migrate\r\n    php artisan db:seed\r\n\r\nFinally, let's display these two dogs, when accessing the `dogs/` route. Edit `controllers/DogsController.php`, and update the `index` method, like so:\r\n\r\n    public function index()\r\n    {\r\n        return View::make('dogs.index')\r\n    \t\t->with('dogs', Dog::all());\r\n    }\r\n\r\nThe last step is to update the view to display each of the posts that was passed to it. Open `views/dogs/index.blade.php` and add:\r\n\r\n    <ul>\r\n        @foreach($dogs as $dog)\r\n    \t\t<li>{{ $dog->name }} : {{ $dog->age }}</li>\r\n    \t@endforeach\r\n    </ul>\r\n\r\nOkay, okay, we're not using a layout file with the proper HTML. Who cares; this is just an example, fool.\r\n\r\nAnyhow, we're all set. Run the server, and browse to `localhost:8000/dogs` to view your list.\r\n\r\n    php artisan serve\r\n\r\n- Sparky : 5\r\n- Joe : 11\r\n\r\nIsn't that way faster than manually doing all of that writing? To finish up, let's run the tests to make sure that everything is working, as expected.\r\n\r\n    phpunit\r\n\r\nAnd...it's green!\r\n\r\n### Scaffolding\r\n\r\n![scaffolding](https://dl.dropboxusercontent.com/u/774859/GitHub-Repos/scaffold-example.png)\r\n\r\nThink of scaffolding as an extension of a resource. It has the exact same interface.\r\n\r\n```bash\r\nphp artisan generate:scaffold tweet --fields=\"author:string, body:text\"\r\n```\r\n\r\nThe only difference is that it will handle all of the boilerplate. This can be particularly useful for prototyping - or even learning how to do basic things, such as delete a record from a database table, or build a form, or perform validation on that form.\r\n\r\n![view scaffold](https://dl.dropboxusercontent.com/u/774859/GitHub-Repos/scaffold-view.png)\r\n\r\n![view validation](https://dl.dropboxusercontent.com/u/774859/GitHub-Repos/scaffold-validation.png)\r\n\r\n### Forms\r\nThis handy new generator allows you to, with a single command, generate the necessary HTML for a form, based on attributes from a provided model. Perhaps an example is in order:\r\n\r\n```bash\r\nphp artisan generate:form tweet\r\n```\r\nAssuming that I do have a `Tweet` model and its associated `tweet` table, this command will output:\r\n\r\n```html\r\n{{ Form::open(array('route' => 'tweets.store')) }}\r\n    <ul>\r\n        <li>\r\n            {{ Form::label('author', 'Author:') }}\r\n            {{ Form::text('author') }}\r\n        </li>\r\n\r\n        <li>\r\n            {{ Form::label('body', 'Body:') }}\r\n            {{ Form::textarea('body') }}\r\n        </li>\r\n\r\n        <li>\r\n            {{ Form::submit() }}\r\n        </li>\r\n    </ul>\r\n{{ Form::close() }}\r\n```\r\nPretty neat, huh? It read the attributes and data types, and prepared the markup for you! One less thing to worry about!\r\n\r\n#### Specifying the Form's Method\r\nBut what if you intend to update a resource, rather than create a new one? Well, in that case, use the `--method` option.\r\n\r\n```bash\r\nphp artisan generate:form tweet --method=\"update\"\r\n```\r\n\r\nThis will mostly generate the same HTML, however, the `Form::open()` method will be adjusted, as needed:\r\n\r\n```php\r\n{{ Form::open(array('method' => 'PATCH', 'route' => 'tweets.update')) }}\r\n```\r\n\r\nThe method option will accept any number of values (*add, edit, update, post, create, etc.*), but, essentially, you're just telling it whether you are creating or editing a resource. As such, there's only two possible outputs: `POST` and `PATCH` (the former being the default).\r\n\r\n#### Custom HTML\r\n\r\nWhat if you don't like the idea of using an unordered list for a form? Use the `--html` option, along with the name of the element that you'd prefer to use:\r\n\r\n```bash\r\nphp artisan generate:form tweet --html=\"div\"\r\n```\r\nNow, the generator we'll present the elements within `div`s!\r\n\r\n```html\r\n{{ Form::open(array('route' => 'tweets.store')) }}\r\n    <div>\r\n        {{ Form::label('author', 'Author:') }}\r\n        {{ Form::text('author') }}\r\n    </div>\r\n\r\n    <div>\r\n        {{ Form::label('body', 'Body:') }}\r\n        {{ Form::textarea('body') }}\r\n    </div>\r\n\r\n    <div>\r\n        {{ Form::submit() }}\r\n    </div>\r\n{{ Form::close() }}\r\n```\r\n\r\n#### Copying and Saving\r\n\r\nAt least for now, and unlike the other generators in this package, this command will output the form, at which point you can copy and paste it where needed. Of course, you can always pipe the output to the clipboard or save to a file, using existing tools. For instance:\r\n\r\n```bash\r\n# copy the output to the clipboard\r\nphp artisan generate:form tweet | pbcopy\r\n\r\n# save it to a form partial\r\nphp artisan generate:form tweet > app/views/posts/form.blade.php\r\n```\r\n### Tests\r\n\r\nUse `generate:test` when you need to create a new PHPUnit test class. Here's an example:\r\n\r\n```bash\r\nphp artisan generate:test FooTest\r\n```\r\n\r\nThis will produce `app/tests/FooTest.php`.\r\n\r\n```php\r\n<?php\r\n\r\nclass FooTest extends TestCase {\r\n\r\n    public function test()\r\n    {\r\n\r\n    }\r\n\r\n}\r\n```\r\n\r\n### Pivot Tables\r\n\r\nCreating joinable/pivot tables can sometimes be confusing.\r\n\r\n- Should the table names be plural?\r\n- In what order do we write the table names to make Laravel happy?\r\n- What fields should be in the pivot table?\r\n\r\nThis process can be automated now. Simply call the `generate:pivot`\r\ncommand, and provide the names of the tables that should be joinable.\r\nFor example, a post can have many tags, and a tag can have many posts.\r\nRun the following command to create the necessary pivot table.\r\n\r\n```bash\r\nphp artisan generate:pivot posts tags\r\n```\r\n\r\nIt doesn't matter which order you provide the table names (or whether\r\nyou pluralize them or not). The command will correctly create a\r\n`post_tag` migration that has `post_id` and `tag_id` fields.\r\n\r\n```php\r\nSchema::create('post_tag', function(Blueprint $table) {\r\n    $table->integer('post_id');\r\n    $table->integer('tag_id');\r\n});\r\n```\r\n\r\n\r\nFinally, simply migrate the database to create it.\r\n\r\n```bash\r\nphp artisan migrate\r\n```\r\n\r\nPivot table finished!\r\n\r\nTo put it all together, let's do it from scratch. We need a posts table,\r\na tags table, and the connecting pivot table for the two. We can tackle\r\nthis easily with the generators.\r\n\r\n```bash\r\nphp artisan generate:migration create_posts_table --fields=\"title:string, description:text\"\r\n\r\nphp artisan generate:migration create_tags_table --fields=\"name:string\"\r\n\r\nphp artisan generate:pivot posts tags\r\n```\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}